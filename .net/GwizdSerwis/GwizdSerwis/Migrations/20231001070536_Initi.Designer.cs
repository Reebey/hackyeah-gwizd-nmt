// <auto-generated />
using System;
using GwizdSerwis.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GwizdSerwis.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231001070536_Initi")]
    partial class Initi
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GwizdSerwis.DbEntities.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ThreatLevel")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Żubr",
                            ThreatLevel = (byte)2
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ryś",
                            ThreatLevel = (byte)2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dziki kot",
                            ThreatLevel = (byte)2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dziki pies",
                            ThreatLevel = (byte)2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sarna",
                            ThreatLevel = (byte)1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Jeleń",
                            ThreatLevel = (byte)2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Wilk",
                            ThreatLevel = (byte)2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Niedźwiedź",
                            ThreatLevel = (byte)2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Królik",
                            ThreatLevel = (byte)1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Zając",
                            ThreatLevel = (byte)1
                        });
                });

            modelBuilder.Entity("GwizdSerwis.DbEntities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4111d83-e1bc-423d-ba45-62b14774df97",
                            Email = "test@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mateusz",
                            LastName = "Kowalski",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "test@example.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdba7856-fc5b-4b9a-802a-cf1ab1dbd5b1",
                            Email = "admintest@example.com",
                            EmailConfirmed = false,
                            FirstName = "Michal",
                            LastName = "Nowak",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admintest@example.com"
                        });
                });

            modelBuilder.Entity("GwizdSerwis.DbEntities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PointId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("GwizdSerwis.DbEntities.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActiveUntil")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<string>("Annotation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Points");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveUntil = new DateTime(2023, 10, 1, 19, 5, 36, 766, DateTimeKind.Local).AddTicks(8233),
                            Added = new DateTime(2023, 10, 1, 9, 5, 36, 766, DateTimeKind.Local).AddTicks(8191),
                            AnimalId = 1,
                            Annotation = "Cokolwiek",
                            AuthorId = 1,
                            District = "Małopolska",
                            Latitude = 50.049999999999997,
                            Longitude = 19.923999999999999
                        },
                        new
                        {
                            Id = 2,
                            ActiveUntil = new DateTime(2023, 10, 1, 13, 5, 36, 766, DateTimeKind.Local).AddTicks(8240),
                            Added = new DateTime(2023, 10, 1, 9, 5, 36, 766, DateTimeKind.Local).AddTicks(8238),
                            AnimalId = 2,
                            Annotation = "Cokolwiek",
                            AuthorId = 1,
                            District = "Małopolska",
                            Latitude = 50.149999999999999,
                            Longitude = 19.974
                        },
                        new
                        {
                            Id = 3,
                            ActiveUntil = new DateTime(2023, 10, 1, 12, 5, 36, 766, DateTimeKind.Local).AddTicks(8244),
                            Added = new DateTime(2023, 10, 1, 9, 5, 36, 766, DateTimeKind.Local).AddTicks(8243),
                            AnimalId = 4,
                            Annotation = "Cokolwiek",
                            AuthorId = 1,
                            District = "Małopolska",
                            Latitude = 50.25,
                            Longitude = 19.954000000000001
                        },
                        new
                        {
                            Id = 4,
                            ActiveUntil = new DateTime(2023, 10, 1, 19, 5, 36, 766, DateTimeKind.Local).AddTicks(8249),
                            Added = new DateTime(2023, 10, 1, 9, 5, 36, 766, DateTimeKind.Local).AddTicks(8247),
                            AnimalId = 7,
                            AuthorId = 1,
                            District = "Małopolska",
                            Latitude = 51.149999999999999,
                            Longitude = 19.963999999999999
                        },
                        new
                        {
                            Id = 5,
                            ActiveUntil = new DateTime(2023, 10, 1, 17, 5, 36, 766, DateTimeKind.Local).AddTicks(8253),
                            Added = new DateTime(2023, 10, 1, 9, 5, 36, 766, DateTimeKind.Local).AddTicks(8252),
                            AnimalId = 1,
                            AuthorId = 1,
                            District = "Małopolska",
                            Latitude = 52.039999999999999,
                            Longitude = 21.943999999999999
                        },
                        new
                        {
                            Id = 6,
                            ActiveUntil = new DateTime(2023, 10, 1, 19, 5, 36, 766, DateTimeKind.Local).AddTicks(8258),
                            Added = new DateTime(2023, 10, 1, 9, 5, 36, 766, DateTimeKind.Local).AddTicks(8256),
                            AnimalId = 1,
                            AuthorId = 1,
                            District = "Małopolska",
                            Latitude = 50.151000000000003,
                            Longitude = 20.943999999999999
                        },
                        new
                        {
                            Id = 7,
                            ActiveUntil = new DateTime(2023, 10, 1, 19, 5, 36, 766, DateTimeKind.Local).AddTicks(8262),
                            Added = new DateTime(2023, 10, 1, 9, 5, 36, 766, DateTimeKind.Local).AddTicks(8261),
                            AnimalId = 1,
                            Annotation = "Cokolwiek2",
                            AuthorId = 1,
                            District = "Małopolska",
                            Latitude = 54.020000000000003,
                            Longitude = 16.943999999999999
                        },
                        new
                        {
                            Id = 8,
                            ActiveUntil = new DateTime(2023, 10, 1, 19, 5, 36, 766, DateTimeKind.Local).AddTicks(8267),
                            Added = new DateTime(2023, 10, 1, 9, 5, 36, 766, DateTimeKind.Local).AddTicks(8265),
                            AnimalId = 2,
                            Annotation = "Cokolwiek3",
                            AuthorId = 1,
                            District = "Małopolska",
                            Latitude = 53.030000000000001,
                            Longitude = 18.943999999999999
                        },
                        new
                        {
                            Id = 9,
                            ActiveUntil = new DateTime(2023, 10, 1, 19, 5, 36, 766, DateTimeKind.Local).AddTicks(8271),
                            Added = new DateTime(2023, 10, 1, 9, 5, 36, 766, DateTimeKind.Local).AddTicks(8270),
                            AnimalId = 2,
                            Annotation = "Cokolwiek3",
                            AuthorId = 1,
                            District = "Małopolska",
                            Latitude = 52.32,
                            Longitude = 20.544
                        },
                        new
                        {
                            Id = 10,
                            ActiveUntil = new DateTime(2023, 10, 1, 19, 5, 36, 766, DateTimeKind.Local).AddTicks(8276),
                            Added = new DateTime(2023, 10, 1, 9, 5, 36, 766, DateTimeKind.Local).AddTicks(8274),
                            AnimalId = 1,
                            Annotation = "Cokolwiek3",
                            AuthorId = 1,
                            District = "Małopolska",
                            Latitude = 49.439999999999998,
                            Longitude = 19.344000000000001
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GwizdSerwis.DbEntities.Image", b =>
                {
                    b.HasOne("GwizdSerwis.DbEntities.Point", "Point")
                        .WithMany("Images")
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Point");
                });

            modelBuilder.Entity("GwizdSerwis.DbEntities.Point", b =>
                {
                    b.HasOne("GwizdSerwis.DbEntities.Animal", "Animal")
                        .WithMany("Points")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GwizdSerwis.DbEntities.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("GwizdSerwis.DbEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("GwizdSerwis.DbEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GwizdSerwis.DbEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("GwizdSerwis.DbEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GwizdSerwis.DbEntities.Animal", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("GwizdSerwis.DbEntities.Point", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
